# @format

type Property implements MongoBase {
  community: Community
  location: Location
  owner: Member
  propertyName: String!
  propertyType: String

  listedForSale: Boolean!
  listedForRent: Boolean!
  listedForLease: Boolean!
  listedInDirectory: Boolean!

  listingDetail: ListingDetails
  location: Location

  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}
type ListingDetails {
  price: Float
  rentHigh: Float
  rentLow: Float
  lease: Float
  maxGuests: Int
  bedrooms: Int
  bedroomDetails: [BedroomDetails]
  bathrooms: Float
  squareFeet: Int
  description: String
  amenities: [String]
  additionalAmenities: [AdditionalAmenities]
  images: [String]
  video: String
  floorPlan: String
  floorPlanImages: [String]
  listingAgent: String
  listingAgentPhone: String
  listingAgentEmail: String
  listingAgentWebsite: String
  listingAgentCompany: String
  listingAgentCompanyPhone: String
  listingAgentCompanyEmail: String
  listingAgentCompanyWebsite: String
  listingAgentCompanyAddress: String
}
input ListingDetailsInput {
  price: Float
  rentHigh: Float
  rentLow: Float
  lease: Float
  maxGuests: Int
  bedrooms: Int
  bedroomDetails: [BedroomDetailsInput]
  bathrooms: Float
  squareFeet: Int
  description: String
  amenities: [String]
  additionalAmenities: [AdditionalAmenitiesInput]
  images: [String]
  video: String
  floorPlan: String
  floorPlanImages: [String]
  listingAgent: String
  listingAgentPhone: String
  listingAgentEmail: String
  listingAgentWebsite: String
  listingAgentCompany: String
  listingAgentCompanyPhone: String
  listingAgentCompanyEmail: String
  listingAgentCompanyWebsite: String
  listingAgentCompanyAddress: String
}

type BedroomDetails {
  id: ObjectID!
  roomName: String
  bedDescriptions: [String]
}
input BedroomDetailsInput {
  id: ObjectID
  roomName: String
  bedDescriptions: [String]
}

type AdditionalAmenities {
  id: ObjectID!
  category: String
  amenities: [String]
}
input AdditionalAmenitiesInput {
  id: ObjectID
  category: String
  amenities: [String]
}

type Location implements MongoBase {
  position: Point
  address: Address
  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}
input LocationInput {
  position: PointInput
  address: AddressInput
  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Point implements MongoBase {
  type: String
  coordinates: [Float]

  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}
input PointInput {
  type: String
  coordinates: [Float]

  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Address {
  streetNumber: String
  streetName: String
  municipality: String
  municipalitySubdivision: String
  countrySecondarySubdivision: String
  countryTertiarySubdivision: String
  countrySubdivision: String
  countrySubdivisionName: String
  postalCode: String
  extendedPostalCode: String
  countryCode: String
  country: String
  countryCodeISO3: String
  freeformAddress: String
}
input AddressInput {
  streetNumber: String
  streetName: String
  municipality: String
  municipalitySubdivision: String
  countrySecondarySubdivision: String
  countryTertiarySubdivision: String
  countrySubdivision: String
  countrySubdivisionName: String
  postalCode: String
  extendedPostalCode: String
  countryCode: String
  country: String
  countryCodeISO3: String
  freeformAddress: String
}

extend type Query {
  properties: [Property]
  property(id: ObjectID!): Property
  propertiesByCommunityId(communityId: ID!): [Property]
  propertiesForCurrentUserByCommunityId(communityId: ID!): [Property]
  propertiesSearch(input: PropertiesSearchInput!): PropertySearchResult
}

extend type Mutation {
  propertyAdd(input: PropertyAddInput!): PropertyMutationResult!
  propertyUpdate(input: PropertyUpdateInput!): PropertyMutationResult!
  propertyDelete(input: PropertyDeleteInput!): PropertyMutationResult!
  propertyAssignOwner(input: PropertyAssignOwnerInput!): PropertyMutationResult!
  propertyRemoveOwner(input: PropertyRemoveOwnerInput!): PropertyMutationResult!  
  propertyListingImageCreateAuthHeader(input: PropertyBlobFileInput!): PropertyBlobFileAuthHeaderResult!
}

type PropertyMutationResult {
  status: MutationStatus!
  property: Property
}
input PropertyDeleteInput {
  id: ObjectID!
}

input PropertiesSearchInput {
  searchString: String
  options: PropertiesSearchOptions
}

input FilterDetails {
  fieldName: String!
  fieldValues: [String!]!
}

input PropertiesSearchOptions {
  filters: [FilterDetails]
  facets: [String]
}

input PropertyAddInput {
  propertyName: String!
}
input PropertyUpdateInput {
  id: ObjectID!
  propertyName: String
  propertyType: String
  listedForSale: Boolean
  listedForRent: Boolean
  listedForLease: Boolean
  listedInDirectory: Boolean
  owner: PropertyOwnerInput
  listingDetail: ListingDetailsInput
  location: LocationInput
}

input PropertyOwnerInput {
  id: ObjectID
}
input PropertyAssignOwnerInput {
  id: ObjectID!
  ownerId: ObjectID!
}
input PropertyRemoveOwnerInput {
  id: ObjectID!
}

type PropertySearchResult {
  propertyResults: [Property]
  total: Int
  facets: PropertySearchFacets
}
type PropertySearchFacets {
  type: [FacetDetail]
}

type FacetDetail {
  value: String
  count: Int
}


input PropertyBlobFileInput {
  propertyId: ObjectID!
  contentType: String!
  contentLength: Int!
}
type PropertyBlobFileAuthHeaderResult {
  status: MutationStatus!
  authHeader: BlobAuthHeader
  property: Property
}